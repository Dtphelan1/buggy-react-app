{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxHeight","maxWidth","heading","textAlign","input","width","dividerFullWidth","margin","dividerInset","spacing","App","classes","useState","todos","setTodos","currentTodoText","setCurrentTodoText","toggleComplete","todo","isCompleted","deleteTodo","filteredTodos","filter","t","id","Container","className","Typography","variant","component","gutterBottom","onSubmit","e","preventDefault","text","newTodos","TextField","value","onChange","target","List","Divider","inset","color","display","map","i","ListItem","button","ListItemText","ListItemSecondaryAction","Checkbox","checked","IconButton","onClick","_","isEmpty","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79854966.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport _ from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Container, List, ListItem, ListItemText, TextField, Typography, IconButton, Checkbox, ListItemSecondaryAction, Divider,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxHeight: '100vh',\n    maxWidth: '1000px',\n  },\n  heading: {\n    textAlign: 'center',\n  },\n  input: {\n    width: '100%',\n  },\n  dividerFullWidth: {\n    margin: '5px 0 0 0',\n  },\n  dividerInset: {\n    margin: `5px 0 0 ${theme.spacing(2)}px`,\n  },\n\n}));\n\nfunction App() {\n  // Classes object using MaterialUi's makeStyles utility\n  const classes = useStyles();\n  // Create a list of todos\n  const [todos, setTodos] = useState([]);\n  // Create an object corresponding to the current, inprogress todo stored in the textField\n  const [currentTodoText, setCurrentTodoText] = useState('');\n\n  // A function for creating a new Todo\n  function newTodo(text) {\n    return {\n      id: 1,\n      todo: text,\n      isCompleted: false,\n    };\n  }\n\n  // Toggle the isCompleted flag on the todo\n  function toggleComplete(todo) {\n    todo.isCompleted = !todo.isCompleted;\n  }\n\n  // Delete the todo from our list\n  function deleteTodo(todo) {\n    const filteredTodos = [...todos].filter((t) => !(t.id === todo.id));\n    setTodos(filteredTodos);\n  }\n\n  return (\n    <Container className={classes.root}>\n      <Typography variant=\"h2\" component=\"h1\" className={classes.heading} gutterBottom>\n        Todo List\n      </Typography>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          const newTodos = [...todos, newTodo(currentTodoText)];\n          setTodos(newTodos);\n        }}\n      >\n        <TextField\n          className={classes.input}\n          value={currentTodoText}\n          variant=\"outlined\"\n          onChange={(e) => setCurrentTodoText(e.target.value)}\n        />\n      </form>\n\n      <List>\n        <Divider inset className={classes.dividerFullWidth} />\n        <li>\n          <Typography\n            className={classes.dividerInset}\n            color=\"textSecondary\"\n            display=\"block\"\n            variant=\"caption\"\n          >\n            Todos\n          </Typography>\n        </li>\n\n        {todos.filter((todo) => !todo.isCompleted).map((todo, i) => (\n          <ListItem button key={i}>\n            <ListItemText>\n              {todo.todo}\n            </ListItemText>\n            <ListItemSecondaryAction>\n              <Checkbox checked={todo.isCompleted} value={todo.isCompleted} onChange={() => toggleComplete(todo)} />\n              <IconButton onClick={() => deleteTodo(todo)}>\n                <DeleteIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n\n        {!_.isEmpty(todos.filter((todo) => todo.isCompleted)) && (\n          <>\n            <Divider inset className={classes.dividerFullWidth} />\n            <li>\n              <Typography\n                className={classes.dividerInset}\n                color=\"textSecondary\"\n                display=\"block\"\n                variant=\"caption\"\n              >\n                Completed Items\n              </Typography>\n            </li>\n          </>\n        )}\n\n        {todos.filter((todo) => todo.isCompleted).map((todo, i) => (\n          <ListItem button key={i}>\n            <ListItemText>\n              {todo.todo}\n\n            </ListItemText>\n            <ListItemSecondaryAction>\n              <IconButton onClick={() => deleteTodo(todo)}>\n                <DeleteIcon />\n              </IconButton>\n              <Checkbox checked={todo.isCompleted} onChange={() => toggleComplete(todo)} />\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}