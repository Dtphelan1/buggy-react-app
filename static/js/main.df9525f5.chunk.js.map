{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxHeight","maxWidth","heading","textAlign","input","width","dividerFullWidth","margin","dividerInset","spacing","App","classes","useState","todos","setTodos","currentTodoText","setCurrentTodoText","toggleComplete","todo","isCompleted","deleteTodo","filteredTodos","filter","t","id","Container","className","Typography","variant","component","gutterBottom","onSubmit","e","preventDefault","clonedTodos","newTodo","push","addTodo","TextField","value","onChange","target","List","Divider","inset","color","display","map","i","ListItem","button","ListItemText","ListItemSecondaryAction","Checkbox","checked","onClick","IconButton","_","isEmpty","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VASMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,UAAW,QACXC,SAAU,UAEZC,QAAS,CACPC,UAAW,UAEbC,MAAO,CACLC,MAAO,QAETC,iBAAkB,CAChBC,OAAQ,aAEVC,aAAc,CACZD,OAAO,WAAD,OAAaT,EAAMW,QAAQ,GAA3B,WAyHKC,MArHf,WAEE,IAAMC,EAAUf,IAFH,EAIagB,mBAAS,IAJtB,mBAINC,EAJM,KAICC,EAJD,OAMiCF,mBAAS,IAN1C,mBAMNG,EANM,KAMWC,EANX,KA2Bb,SAASC,EAAeC,GACtBA,EAAKC,aAAeD,EAAKC,YAI3B,SAASC,EAAWF,GAClB,IAAMG,EAAgB,YAAIR,GAAOS,QAAO,SAACC,GAAD,QAASA,EAAEC,KAAON,EAAKM,OAC/DV,EAASO,GAGX,OACE,eAACI,EAAA,EAAD,CAAWC,UAAWf,EAAQZ,KAA9B,UACE,cAAC4B,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKH,UAAWf,EAAQT,QAAS4B,cAAY,EAAhF,uBAGA,sBACEC,SAAU,SAACC,GACTA,EAAEC,iBAzBV,WACE,IAAMC,EAAW,YAAOrB,GAClBsB,EAXU,CACdX,GAAI,EACJN,KAS4BH,EAR5BI,aAAa,GASfe,EAAYE,KAAKD,GACjBrB,EAASoB,GAsBHG,IAHJ,SAME,cAACC,EAAA,EAAD,CACEZ,UAAWf,EAAQP,MACnBmC,MAAOxB,EACPa,QAAQ,WACRY,SAAU,SAACR,GAAD,OAAOhB,EAAmBgB,EAAES,OAAOF,YAIjD,eAACG,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAASC,OAAK,EAAClB,UAAWf,EAAQL,mBAClC,6BACE,cAACqB,EAAA,EAAD,CACED,UAAWf,EAAQH,aACnBqC,MAAM,gBACNC,QAAQ,QACRlB,QAAQ,UAJV,qBAUDf,EAAMS,QAAO,SAACJ,GAAD,OAAWA,EAAKC,eAAa4B,KAAI,SAAC7B,EAAM8B,GAAP,OAC7C,eAACC,EAAA,EAAD,CAAUC,QAAM,EAAhB,UACE,cAACC,EAAA,EAAD,UACGjC,EAAKA,OAER,eAACkC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAUC,QAASpC,EAAKC,YAAaoB,MAAOrB,EAAKC,YAAaoC,QAAS,kBAAMtC,EAAeC,MAC5F,cAACsC,EAAA,EAAD,CAAYD,QAAS,kBAAMnC,EAAWF,IAAtC,SACE,cAAC,IAAD,WAPgB8B,OAatBS,IAAEC,QAAQ7C,EAAMS,QAAO,SAACJ,GAAD,OAAUA,EAAKC,iBACtC,qCACE,cAACwB,EAAA,EAAD,CAASC,OAAK,EAAClB,UAAWf,EAAQL,mBAClC,6BACE,cAACqB,EAAA,EAAD,CACED,UAAWf,EAAQH,aACnBqC,MAAM,gBACNC,QAAQ,QACRlB,QAAQ,UAJV,kCAYLf,EAAMS,QAAO,SAACJ,GAAD,OAAUA,EAAKC,eAAa4B,KAAI,SAAC7B,EAAM8B,GAAP,OAC5C,eAACC,EAAA,EAAD,CAAUC,QAAM,EAAhB,UACE,cAACC,EAAA,EAAD,UACGjC,EAAKA,OAER,eAACkC,EAAA,EAAD,WACE,cAACI,EAAA,EAAD,CAAYD,QAAS,kBAAMnC,EAAWF,IAAtC,SACE,cAAC,IAAD,MAEF,cAACmC,EAAA,EAAD,CAAUC,QAASpC,EAAKC,YAAaqB,SAAU,kBAAMvB,EAAeC,WARlD8B,aC3HhCW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.df9525f5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Container, List, ListItem, ListItemText, TextField, Typography, IconButton, Checkbox, ListItemSecondaryAction, Divider,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n// Define the styles using MaterialUi's makeStyles\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxHeight: '100vh',\n    maxWidth: '1000px',\n  },\n  heading: {\n    textAlign: 'center',\n  },\n  input: {\n    width: '100%',\n  },\n  dividerFullWidth: {\n    margin: '5px 0 0 0',\n  },\n  dividerInset: {\n    margin: `5px 0 0 ${theme.spacing(2)}px`,\n  }\n}));\n\nfunction App() {\n  // Classes object using MaterialUi's makeStyles utility\n  const classes = useStyles();\n  // Create a list of todos\n  const [todos, setTodos] = useState([]);\n  // Create an object corresponding to the current, inprogress todo stored in the textField\n  const [currentTodoText, setCurrentTodoText] = useState('');\n\n  // Create a new todo based on the provided text\n  function createNewTodo(text) {\n    const newTodo = {\n      id: 1,\n      todo: text,\n      isCompleted: false,\n    };\n    return newTodo\n  }\n\n  // Add a todo to our todos list\n  function addTodo() {\n    const clonedTodos = [...todos]\n    const newTodo = createNewTodo(currentTodoText)\n    clonedTodos.push(newTodo)\n    setTodos(clonedTodos);\n  }\n\n  // Toggle the isCompleted flag on the todo\n  function toggleComplete(todo) {\n    todo.isCompleted = !todo.isCompleted;\n  }\n\n  // Delete the todo from our list\n  function deleteTodo(todo) {\n    const filteredTodos = [...todos].filter((t) => !(t.id === todo.id));\n    setTodos(filteredTodos);\n  }\n\n  return (\n    <Container className={classes.root}>\n      <Typography variant=\"h2\" component=\"h1\" className={classes.heading} gutterBottom>\n        Todo List\n      </Typography>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          addTodo();\n        }}\n      >\n        <TextField\n          className={classes.input}\n          value={currentTodoText}\n          variant=\"outlined\"\n          onChange={(e) => setCurrentTodoText(e.target.value)}\n        />\n      </form>\n\n      <List>\n        <Divider inset className={classes.dividerFullWidth} />\n        <li>\n          <Typography\n            className={classes.dividerInset}\n            color=\"textSecondary\"\n            display=\"block\"\n            variant=\"caption\"\n          >\n            Todos\n          </Typography>\n        </li>\n\n        {todos.filter((todo) => !todo.isCompleted).map((todo, i) => (\n          <ListItem button key={i}>\n            <ListItemText>\n              {todo.todo}\n            </ListItemText>\n            <ListItemSecondaryAction>\n              <Checkbox checked={todo.isCompleted} value={todo.isCompleted} onClick={() => toggleComplete(todo)} />\n              <IconButton onClick={() => deleteTodo(todo)}>\n                <DeleteIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n\n        {!_.isEmpty(todos.filter((todo) => todo.isCompleted)) && (\n          <>\n            <Divider inset className={classes.dividerFullWidth} />\n            <li>\n              <Typography\n                className={classes.dividerInset}\n                color=\"textSecondary\"\n                display=\"block\"\n                variant=\"caption\"\n              >\n                Completed Items\n              </Typography>\n            </li>\n          </>\n        )}\n\n        {todos.filter((todo) => todo.isCompleted).map((todo, i) => (\n          <ListItem button key={i}>\n            <ListItemText>\n              {todo.todo}\n            </ListItemText>\n            <ListItemSecondaryAction>\n              <IconButton onClick={() => deleteTodo(todo)}>\n                <DeleteIcon />\n              </IconButton>\n              <Checkbox checked={todo.isCompleted} onChange={() => toggleComplete(todo)} />\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}